from os.path import join
import sys

sys.path.append(".")
from pkg.io import files_match_pattern, decode_files


"""
This workflow identifies molecular heterogeneity from MSI data (provided as imzML files)
of specific regions (provided as binary tif images) by performing UMAP and HDBSCAN clustering.
The workflow workflow molecular_signatures_flow can be subsequently applied 
to extract molecular signatures for identified clusters 

input:
    data folder must contain the following directories:
    - "bin_imgs": directory with regions of interest (rois) as binary images named roi_group_sampleno.tif
    - "msi": directory with imzML files named group_sample.imzML
    - "umap_model.sav": optional trained UMAP model (required for reproducing results as UMAP is stochastic)

output:
    - "bin_imgs/<class>/imzML: imzML files containing only pixel from provided binary images
    - "bin_imgs/<class>/umap: clustering results from UMAP and HDBSCAN
"""


configfile: 'data/config.yaml'


MOL_HET_SCRIPT_PATH = 'molecular_heterogeneity_flow/scripts'
VIS_SCRIPT_PATH = 'data_visualization'
MSI_SEG_SCRIPT_PATH = 'msi_segmentation_flow/scripts'

imzML_pattern = r"^[a-zA-z0-9]+_[a-zA-z0-9]+\.imzML$" # imzML files must be named: group_sampleno.imzML
roi_img_pattern = r"^[a-zA-z0-9]+_[a-zA-z0-9]+_[a-zA-z0-9]+\.tif$"  # binary image files must be named: roi_group_sampleno.tif

DATA_PATH = config['data']
# BENCHMARK_PATH = os.path.join(DATA_PATH, 'benchmark')
# BM_REPEAT = 5
IMZML_DIR = join(DATA_PATH, 'msi')
ROI_IMG_DIR = join(DATA_PATH, 'bin_imgs')
IMZML_FILES = files_match_pattern(IMZML_DIR, imzML_pattern)
FILE_NAMES = [f.split('.')[0] for f in IMZML_FILES]
ROI_IMG_FILES = files_match_pattern(ROI_IMG_DIR, roi_img_pattern)
ROI_IMG_FILES = [f for f in ROI_IMG_FILES if f.split('_')[0] != '-1']
ROIS, _, _ = decode_files(ROI_IMG_FILES)
USE_MODEL = config['umap']['use_model']
if USE_MODEL:
    UMAP_MODEL = join(DATA_PATH, 'umap_model.sav')
else:
    UMAP_MODEL = ''


rule all:
    input: expand(ROI_IMG_DIR + "/{roi}/umap_" + str(config['umap']['n_neighbors']) + "neighb_hdbscan_" + str(config['hdbscan']['min_samples']) + "ms_" + str(config['hdbscan']['min_cluster_size']) + "mcs" + "/{fl}.png", roi=ROIS, fl=FILE_NAMES)

rule reduce_spectra_to_roi_pixels:
    input: bin_img=ROI_IMG_DIR + "/{roi}_{fl}.tif",
            imzML_fl=IMZML_DIR + "/{fl}.imzML"
    output: ROI_IMG_DIR + "/{roi}/imzML/{fl}.imzML"
    # benchmark: repeat(BENCHMARK_PATH + "/{roi}_{fl}.reduce_spectra_to_roi_pixels.benchmark.txt", BM_REPEAT)
    shell: "python " + MOL_HET_SCRIPT_PATH + "/get_spectra_from_mask.py {input.imzML_fl} {input.bin_img} {output}"

rule umap_segment:
    input: expand(ROI_IMG_DIR + "/{{ROIS}}/imzML/{fl}.imzML", fl=FILE_NAMES)
    output: expand(ROI_IMG_DIR + "/{{ROIS}}/umap_" + str(config['umap']['n_neighbors']) + "neighb_hdbscan_" + str(config['hdbscan']['min_samples']) + "ms_" + str(config['hdbscan']['min_cluster_size']) + "mcs" + "/{fl}.png",fl=FILE_NAMES)
    # benchmark: repeat(BENCHMARK_PATH + "/{{ROIS}}.umap_segment.benchmark.txt", BM_REPEAT)
    run:
        if UMAP_MODEL != '':
            shell("python " + MSI_SEG_SCRIPT_PATH + "/multi_sample_segmentation.py " + ROI_IMG_DIR + "/{wildcards.ROIS}/imzML "
                                                                                                     "-result_dir " + ROI_IMG_DIR + "/{wildcards.ROIS}/umap_{config[umap][n_neighbors]}neighb_hdbscan_{config[hdbscan][min_samples]}ms_{config[hdbscan][min_cluster_size]}mcs "
                                                                                                                                    "-method \'umap\' -dist_metric {config[umap][metric]} -min_dist {config[umap][min_dist]} "
                                                                                                                                    "-clustering_method \'hdbscan\' -dot_size {config[dot_size]} "
                                                                                                                                    "-embedding_model " + UMAP_MODEL)
        else:
            shell("python " + MSI_SEG_SCRIPT_PATH + "/multi_sample_segmentation.py " + ROI_IMG_DIR + "/{wildcards.ROIS}/imzML "
                                                                                                     "-result_dir " + ROI_IMG_DIR + "/{wildcards.ROIS}/umap_{config[umap][n_neighbors]}neighb_hdbscan_{config[hdbscan][min_samples]}ms_{config[hdbscan][min_cluster_size]}mcs "
                                                                                                                                    "-method \'umap\' -dist_metric {config[umap][metric]} -min_dist {config[umap][min_dist]} "
                                                                                                                                    "-clustering_method \'hdbscan\' -dot_size {config[dot_size]}")